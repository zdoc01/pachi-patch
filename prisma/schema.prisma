// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String              @id @default(cuid())
  name                String?
  email               String?             @unique
  emailVerified       DateTime?
  image               String?
  accounts            Account[]
  sessions            Session[]
  gameSessions        GameSession[]
  gameStats           GameSessionStats[]
  gameNightsCreated   GameNight[]         @relation("UserGameNightsCreated")
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model GameNight {
  id                Int                 @id @default(autoincrement())
  archived          Boolean             @default(false)
  createdAt         DateTime            @default(now()) @map(name: "created_at")
  createdBy         User                @relation("UserGameNightsCreated", fields: [createdById], references: [id])
  createdById       String
  games             Game[]
  gameSessions      GameSession[]
  gameSessionStats  GameSessionStats[]
  gameNightStats    GameNightStats?
  updatedAt         DateTime            @updatedAt @map(name: "updated_at")
}

model Game {
  id                Int       @id @default(autoincrement())
  name              String
  gameNights        GameNight[]
  gameNightStats    GameNightStats[]
  gameSessions      GameSession[]
  gameSessionStats  GameSessionStats[]
}

model GameSession {
  id                  String            @id @default(cuid())
  userId              String
  gameNightId         Int
  gameId              Int
  gameSessionStatsId  String?           @unique
  isLocked            Boolean?
  isPlaying           Boolean           @default(false)
  gameNight           GameNight         @relation(fields: [gameNightId], references: [id], onDelete: Cascade)
  game                Game              @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameSessionStats    GameSessionStats? @relation(fields: [gameSessionStatsId], references: [id], onDelete: SetNull)
  user                User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  updatedAt           DateTime          @updatedAt @default(now()) @map(name: "updated_at")

  @@unique([userId, gameNightId])
}

model GameSessionStats {
  id            String        @id @default(cuid())
  gameId        Int
  gameNightId   Int
  userId        String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  game          Game          @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameNight     GameNight     @relation(fields: [gameNightId], references: [id], onDelete: Cascade)
  gameSession   GameSession?
  wins          Int           @default(0)
  losses        Int           @default(0)
  score         Int?

  @@unique([gameId, gameNightId, userId])
}

model GameNightStats {
  id            String        @id @default(cuid())
  gameId        Int
  gameNightId   Int           @unique
  game          Game          @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameNight     GameNight     @relation(fields: [gameNightId], references: [id], onDelete: Cascade)
  wins          Int
  losses        Int
  score         Int?

  @@unique([gameId, gameNightId])
}
